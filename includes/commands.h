/*
 * commands.h
 *
 * Created: 12/12/2012
 *  Author: Konstantin Motov
 */ 


#ifndef COMMANDS_H_
#define COMMANDS_H_

#include "defines.h"

// ****************************** MID ******************************                        
AVR_U8 cmdMidLClear[]    = {0x68, 0x05, 0xC0, 0x23, 0x00, 0x20};
AVR_U8 cmdMidRClear[]    = {0x80, 0x19, 0xC0, 0x23, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20};

AVR_U8 cmdMidKeysClear[] = {0x80, 0x12, 0xC0, 0x21, 0x04, 0x20, 0x00, 0x06, 0x20, 0x06, 0x20, 0x06, 0x20, 0x06, 0x20, 0x06, 0x20, 0x06, 0x20};
AVR_U8 cmdMidKeysDisp[]  = {0x80, 0x0F, 0xC0, 0x21, 0x04, 0x20, 0x00, 0x06, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20};
AVR_U8 cmdMidKeyDisp[]   = {0x80, 0x0F, 0xC0, 0x21, 0x04, 0x20, 0x00, 0x05, 0x20, 0x20, 0x20, 0x20};

AVR_U8 cmdMidRefresh[]   = {0xC0, 0x06, 0xFF, 0x20, 0x08, 0xB0, 0x00};
AVR_U8 cmdGoToRadio[]    = {0x80, 0x04, 0xC0, 0x27, 0x00};

// ****************************** NAVI *****************************
AVR_U8 cmdNaviClear[] = {0x68, 0x04, 0x3B, 0x46, 0x01};
// todo fix 7
AVR_U8 cmdDispNaviIndex[MID_R_SIZE + 7] = {0x68, 0x12, 0x3B, 0x21, 0x60, 0x00, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x06};


#define NAVI_MKX_AREA_0     (11)
#define NAVI_MKX_AREA_1     (5)
#define NAVI_MKX_AREA_2     (5)
#define NAVI_MKX_AREA_3     (5)
#define NAVI_MKX_AREA_4     (5)
#define NAVI_MKX_AREA_5     (7)
#define NAVI_MKX_AREA_6     (20)
#define NAVI_MKX_AREA_7     (20)
#define NAVI_MKX_ZONE       (14)

// ****************************** MK2 ******************************
// 68 12 3B 23 62 10 43 44 43 20 31 2D 30 37 20 20 20 20 20 4F
// todo fix 6
static AVR_U8 cmdDispNaviMk2Area0[MID_R_SIZE + 6] = {0x68, 0x10, 0x3B, 0x23, 0x62, 0x30, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0xCB, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F};
//static AVR_U8 cmdDispNaviMk2Area1[] = {0x68, 0x0A, 0x3B, 0x23, 0x62, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20};
//static AVR_U8 cmdDispNaviMk2Area2[] = {0x68, 0x0A, 0x3B, 0x23, 0x62, 0x32, 0x20, 0x20, 0x20, 0x20, 0x20};
//static AVR_U8 cmdDispNaviMk2Area3[] = {0x68, 0x0A, 0x3B, 0x23, 0x62, 0x33, 0x20, 0x20, 0x20, 0x20, 0x20};
//static AVR_U8 cmdDispNaviMk2Area4[] = {0x68, 0x0A, 0x3B, 0x23, 0x62, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20};
//static AVR_U8 cmdDispNaviMk2Area5[] = {0x68, 0x0C, 0x3B, 0x23, 0x62, 0x35, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20};
//static AVR_U8 cmdDispNaviMk2Area6[] = {0x68, 0x19, 0x3B, 0x23, 0x62, 0x36, 0x20, 0x20, 0x42, 0x4D, 0x57, 0x20, 0x43, 0x6C, 0x75, 0x62, 0x20, 0x42, 0x75, 0x6C, 0x67, 0x61, 0x72, 0x69, 0x61, 0x20};
//static AVR_U8 cmdDispNaviMk2Area7[] = {0x68, 0x19, 0x3B, 0x23, 0x62, 0x37, 0x20, 0x20, 0x42, 0x4D, 0x57, 0x20, 0x43, 0x6C, 0x75, 0x62, 0x20, 0x42, 0x75, 0x6C, 0x67, 0x61, 0x72, 0x69, 0x61, 0x20};


// Message format for index fields I-0 to I-5 (MK2 navigation system):
// <68 length 3B> A5 62 00 <Index of Textfeldes> <Text in ASCII Hex> <XOR>

// A5 62 01 nn <text> // Zone are 01,02,03,04,05,06,07
// 68 0B 3B A5 62 01 01 20 20 20 20 20 BF
// 68 0B 3B A5 62 01 02 20 20 20 20 20 BC
// 68 0B 3B A5 62 01 03 20 20 20 20 20 BD
// 68 0B 3B A5 62 01 04 20 20 20 20 20 BA

// 68 12 3B 23 62 10 43 44 43 20 31 2D 30 37 20 20 20 20 20 4F "CDC 1-07 "
// 68 0B 3B A5 62 01 41 20 20 20 20 20 FF PartTx=" "
// 68 0B 3B A5 62 01 42 20 20 20 20 20 FC PartTx=" "
// 68 0B 3B A5 62 01 43 20 20 20 20 20 FD PartTx=" "
// 68 0B 3B A5 62 01 44 54 50 20 20 20 FE PartTx="TP "
// 68 0D 3B A5 62 01 45 20 20 20 20 20 20 20 FD PartTx=" "
// 68 1A 3B A5 62 01 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 C9 PartTx=" "
// 68 1A 3B A5 62 01 07 54 50 2D 53 74 61 74 69 6F 6E 3A 20 20 20 20 20 20 20 20 20 E1 EndTx="TP-Station: "

// 68 15 3B 21 60 00 40 50 31 3A 20 43 44 20 31 20 20 20 20 20 20 06 2C         Flags=PartTx F0="P1: CD 1 "
// 68 15 3B 21 60 00 41 50 32 3A 20 4E 4F 20 44 49 53 43 20 20 20 06 24         Flags=PartTx F1="P2: NO DISC "
// 68 17 3B 21 60 00 42 50 33 3A 20 4E 4F 20 44 49 53 43 20 20 20 06 06 06 24   Flags=PartTx F2="P3: NO DISC "
// 68 15 3B 21 60 00 45 50 34 3A 20 4E 4F 20 44 49 53 43 20 20 20 06 26         Flags=PartTx F5="P4: NO DISC "
// 68 15 3B 21 60 00 46 50 35 3A 20 4E 4F 20 44 49 53 43 20 20 20 06 24         Flags=PartTx F6="P5: NO DISC "
// 68 17 3B 21 60 00 07 50 36 3A 20 4E 4F 20 44 49 53 43 20 20 20 06 06 06 64   Flags=       F7="P6: NO DISC "

// 68 1A 3B A5 62 01 07 54 50 2D 53 74 61 74 69 6F 6E 3A 20 54 53 46 20 4A 41 5A 5A 8B FC2=0x01 Fld7,EndTx="TP-Station: TSF JAZZ"

// Refresh the index area
// 68 06 3B A5 60 01 00

// ****************************** MK34 ******************************
#define NAVI_MK3_AREA_0     (0x00)
#define NAVI_MK3_AREA_1     (0x01)
#define NAVI_MK3_AREA_2     (0x02)
#define NAVI_MK3_AREA_3     (0x03)
#define NAVI_MK3_AREA_4     (0x04)
#define NAVI_MK3_AREA_5     (0x05)
#define NAVI_MK3_AREA_6     (0x06)
#define NAVI_MK3_AREA_7     (0x07)

#define NAVI_MK3_FIELD_0    (0x40)
#define NAVI_MK3_FIELD_1    (0x41)
#define NAVI_MK3_FIELD_2    (0x42)
#define NAVI_MK3_FIELD_3    (0x43)
#define NAVI_MK3_FIELD_4    (0x44)
#define NAVI_MK3_FIELD_5    (0x45)
#define NAVI_MK3_FIELD_6    (0x46)
#define NAVI_MK3_FIELD_7    (0x47)
#define NAVI_MK3_FIELD_8    (0x48)
#define NAVI_MK3_FIELD_9    (0x49)

//static AVR_U8 cmdDispNaviMk3Area0[] = {0x68, 0x10, 0x3B, 0x23, 0x62, 0x30, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0xCB, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F};

// Message format for index fields I-0 to I-5 (MK3 and MK4 Navigation System with split screen software):
// <68 length 3B> 21 60 00 <Index of Textfeldes> <Text in ASCII Hex> <XOR>

// 21 60 00 nn <text>
// Index nn
//   0   0x40
//   1   0x41
//   2   0x42
//   3   0x43
//   4   0x44
//   5   0x45
//   6   0x46
//   7   0x47
//   8   0x48
//   9   0x49

// 68 12 3B 23 40 20 46 4D 20 03 20 39 30 2E 35 04 20 20 20 3C - RAD  --> GT  : Display Text:  Layout=0x40:  Fld0,CLS,EndTx="FM "   F3:" 90.5"   F4:"   "
// 68 1D 3B 21 41 03 60 20 31 20 05 20 32 20 05 2A 33 20 05 20 34 20 05 20 35 20 05 20 36 20 45 - RAD  --> GT  : Menu Text:  Layout=0x41:  Fld0,CLS,PartTx   " 1 "  F5:" 2 "  F5:"*3 "  F5:" 4 "  F5:" 5 "  F5:" 6 "
// 68 1A 3B 21 43 20 06 46 4D 05 41 4D 05 53 43 05 20 20 05 54 41 50 45 05 20 57 42 2A - RAD  --> GT  : Menu Text:  Layout=0x43:  Fld6,EndTx   "FM"  F5:"AM"  F5:"SC"  F5:"  "  F5:"TAPE"  F5:" WB"
// 68 12 3B 23 50 20 46 4D 20 03 20 39 30 2E 35 04 20 53 54 2B - RAD  --> GT  : Display Text:  Layout=0x50:  Fld0,CLS,EndTx="FM "   F3:" 90.5"   F4:" ST"

// 68 04 3B 46 01 10 - RAD  --> GT  : LCD clear: No display required

// ****************************** IKE ******************************
AVR_U8 cmdDispIke []     = {0x68, 0x19, 0x80, 0x23, 0x40, 0x30, 0x20, 0x20, 0x42, 0x4D, 0x57, 0x20, 0x43, 0x6C, 0x75, 0x62, 0x20, 0x42, 0x75, 0x6C, 0x67, 0x61, 0x72, 0x69, 0x61, 0x20};
AVR_U8 cmdIkeClearNorm[] = {0x68, 0x05, 0x80, 0x23, 0x40, 0x30};
AVR_U8 cmdDispIkeP[]     = {0x68, 0x1A, 0x80, 0x1A, 0x35, 0x00, 0x20, 0x20, 0x42, 0x4D, 0x57, 0x20, 0x43, 0x6C, 0x75, 0x62, 0x20, 0x42, 0x75, 0x6C, 0x67, 0x61, 0x72, 0x69, 0x61, 0x20};
AVR_U8 cmdIkeClearPern[] = {0x80, 0x05, 0x80, 0x1A, 0x30, 0x00};


// ****************************** OBC ******************************
#ifdef IBUS_DEBUG
AVR_U8 cmdMidLedOff[]   = {0x80, 0x05, 0xE7, 0x2A, 0x00, 0x00};
AVR_U8 cmdMidLedOn[]    = {0x80, 0x05, 0xE7, 0x2A, 0x00, 0x04};
AVR_U8 cmdMidLedBlinc[] = {0x80, 0x05, 0xE7, 0x2A, 0x00, 0x0C};
#endif

// *************************** Diagnostic **************************
AVR_U8 cmdMirrorLFold[]  = {0x3F, 0x06, 0x00, 0x0C, 0x01, 0x31, 0x01};
AVR_U8 cmdMirrorRFold[]  = {0x3F, 0x06, 0x00, 0x0C, 0x02, 0x31, 0x01};
AVR_U8 cmdMirrorLUnfold[] = {0x3F, 0x06, 0x00, 0x0C, 0x01, 0x30, 0x01};
AVR_U8 cmdMirrorRUnfold[] = {0x3F, 0x06, 0x00, 0x0C, 0x02, 0x30, 0x01};

AVR_U8 cmdMirrorLFoldCancel[]  = {0x3F, 0x06, 0x00, 0x0C, 0x01, 0x31, 0x00};
AVR_U8 cmdMirrorRFoldCancel[]  = {0x3F, 0x06, 0x00, 0x0C, 0x02, 0x31, 0x00};
AVR_U8 cmdMirrorLUnfoldCancel[] = {0x3F, 0x06, 0x00, 0x0C, 0x01, 0x30, 0x00};
AVR_U8 cmdMirrorRUnfoldCancel[] = {0x3F, 0x06, 0x00, 0x0C, 0x02, 0x30, 0x00};

AVR_U8 cmdTogleLockUnlock[] = {0x3F, 0x05, 0x00, 0x0C, 0x00, 0x0B};

// *************************** Broadcast ***************************
AVR_U8 cmdSetToDefaultMidR[] = {0xC0, 0x06, 0xFF, 0x20, 0x41, 0xB0, 0x00};
AVR_U8 cmdMidPressTime1[] = {0xC0, 0x06, 0xFF, 0x20, 0x08, 0xE0, 0xC0}; // MID Press Time
AVR_U8 cmdMidPressTime2[] = {0xC0, 0x06, 0xFF, 0x20, 0x08, 0xB0, 0x00}; // MID Press Time

// ****************************** LCM ******************************
//AVR_U8 CmdFogL[]    = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01};
//AVR_U8 CmdFogR[]    = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x01};
AVR_U8 CmdFogs[]      = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x02, 0x46, 0x08, 0x18};
AVR_U8 CmdLBeam[]     = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x08, 0x18};
AVR_U8 CmdSideLight[] = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00};
//AVR_U8 CmdLightsOff[] = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// ****************************** MISC *****************************
AVR_U8 cmdGetPdc[] = {0x3F, 0x03, 0x60, 0x1B};
AVR_U8 cmdCarDataRequest[] = {0x80, 0x03, 0xD0, 0x53};

AVR_U8 cmdCdStatus[]  = {0x18, 0x0A, 0x68, 0x39, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x01};

// ************************ Common Buffers *************************
AVR_U8 Msg11[MID_L_SIZE];
AVR_U8 Msg20[MID_R_SIZE];
AVR_U8 MsgMidKey[MID_BUTTONS_SIZE];

#endif /* COMMANDS_H_ */